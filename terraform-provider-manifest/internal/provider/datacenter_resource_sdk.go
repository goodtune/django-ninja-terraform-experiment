// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-manifest/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-manifest/internal/sdk/models/shared"
)

func (r *DatacenterResourceModel) ToSharedDatacenter(ctx context.Context) (*shared.Datacenter, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var location string
	location = r.Location.ValueString()

	out := shared.Datacenter{
		Name:     name,
		Location: location,
	}

	return &out, diags
}

func (r *DatacenterResourceModel) ToOperationsManifestApiv1UpdateDatacenterRequest(ctx context.Context) (*operations.ManifestAPIV1UpdateDatacenterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id int64
	id = r.ID.ValueInt64()

	datacenter, datacenterDiags := r.ToSharedDatacenter(ctx)
	diags.Append(datacenterDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.ManifestAPIV1UpdateDatacenterRequest{
		ID:         id,
		Datacenter: *datacenter,
	}

	return &out, diags
}

func (r *DatacenterResourceModel) ToOperationsManifestApiv1GetDatacenterRequest(ctx context.Context) (*operations.ManifestAPIV1GetDatacenterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id int64
	id = r.ID.ValueInt64()

	out := operations.ManifestAPIV1GetDatacenterRequest{
		ID: id,
	}

	return &out, diags
}

func (r *DatacenterResourceModel) ToOperationsManifestApiv1DeleteDatacenterRequest(ctx context.Context) (*operations.ManifestAPIV1DeleteDatacenterRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id int64
	id = r.ID.ValueInt64()

	out := operations.ManifestAPIV1DeleteDatacenterRequest{
		ID: id,
	}

	return &out, diags
}

func (r *DatacenterResourceModel) RefreshFromSharedDatacenterResponse(ctx context.Context, resp *shared.DatacenterResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.Int64Value(resp.ID)
		r.Location = types.StringValue(resp.Location)
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}
